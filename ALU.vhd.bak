library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_signed.all;
use ieee.numeric_std.all;
-- VHDL code for ALU of the MIPS Processor
entity ALU_VHDL is
generic(
 nr_of_bits : positive := 32
);
port(
 clk : in std_logic;
 a,b : in std_logic_vector(15 downto 0); -- src1, src2
 aluop : in std_logic_vector(2 downto 0); -- function select
 alu_result: out std_logic_vector(15 downto 0); -- ALU Output Result
 mult_high: out std_logic_vector(15 downto 0); -- multipication Output high
 mult_low: out std_logic_vector(15 downto 0); -- multipication Output low
 zero: out std_logic -- Zero Flag
 z_flag, n_flag : out std_logic;
 );
end ALU_VHDL;

architecture Behavioral of ALU_VHDL is
signal result: std_logic_vector(15 downto 0);
begin
process(clk,aluop,a,b)
begin
if(clk = '1') then
 case aluop is
 when "000" =>
  result <= a + b; -- add
 when "001" =>
  result <= a - b; -- sub
 when "010" => 
  result <= a and b; -- and
 when "011" =>
  result <= a or b; -- or
 when "100" =>
  result <= std_logic_vector(shift_left(unsigned(a), to_integer(unsigned(b)))); 
 when "101" =>
  if (a - b = 0) then
   z_flag <= '1';
  end if;
  if (a - b < 0) then
   n_flag <= '1';
  end if;
  if (a - b > 0) then
   z_flag <= '0';
   n_flag <= '0'; 
  end if;
 when others => result <= a + b; -- add
 end case;
end if;
end process;
  zero <= '1' when result=x"0000" else '0';
  alu_result <= result;
end Behavioral;